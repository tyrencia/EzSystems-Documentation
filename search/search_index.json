{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>EzDialogue &amp; EzNpc are two open-source modules that provide a quick and easy way to design, customize and implement dialogues in your game. With EzDialogue, you are able to create and initiate dialogues with humanoid and non-humanoid instances, with the choice of associating dialogues with NPCs.</p> <p>EzDialogue also offers direct dialogue creation in scripts, or using prepared dialogues that can be called and loaded when needed. The best part about it is that it provides almost no limit to how much functionality and additional code you can add when initiating dialogues.</p> <p>EzDialogue works by entering an accepting state of dialogue inputs when a dialogue is started, and continues to do so until it is told to end. You can continue to add dialogues in your script without yielding the thread or script.</p> <p>In short, here are the features offered by EzDialogue &amp; EzNpc:</p> <ul> <li>Create new dialogues with just a few lines of code or use stored dialogues</li> <li>Intuitive way of designing a dialogue in scripts</li> <li>Custom triggers support</li> <li>Easy customization of dialogues and the UI</li> <li>RichText support</li> <li>Quests/Missions support</li> </ul> <p>To begin, install EzDialogue &amp; EzNpc here.</p>"},{"location":"pages/examples/","title":"Examples","text":""},{"location":"pages/examples/#dialoguelist-dialogues","title":"DialogueList Dialogues","text":""},{"location":"pages/examples/#creating-the-dialogue","title":"Creating the Dialogue","text":"<p>You can create an unlimited number of dialogues belonging to one entry, where you may have multiple entries with their own individual dialogues. These are stored in a dictionary.</p> <p>Formatting</p> <p>Dialogue entries follow a specific format as displayed below. Just like you would be able to in a script, you can override any settings and also set certain dialogues to be locked.</p> <pre><code>local DialogueList = {\n    [\"Steve\"] = {\n        [\"FirstDialogue\"] = {\n            Settings = false;\n            Locked = false;\n            Prerequisites = false;\n            Dialogue = {\n                [1] = {Message = \"Hello!\", Next = \"Second\"}; -- The first message or dialogue to be played in the dialogue always has a key of 1\n                [\"Second\"] = {Message = \"This is a converted dialogue!\", Next = \"Third\"}; -- The Next key points towards the next message that will be played once this message is finished\n                [\"Third\"] = {Message = \"Time to end!\", Next = false}; -- If next is set to false, this will mark the end of the dialogue\n            };\n        };\n        [\"SecondDialogue\"] = {\n            Settings = {\n                TextFont = Enum.Font.Cartoon; -- Override the font of the dialogue and display name text\n                NameFont = Enum.Font.Cartoon;\n            };\n            Locked = false;\n            Prerequisites = false;\n            Dialogue = {\n                [1] = {Message = \"Hello!\", Next = \"Second\"};\n                [\"Second\"] = {Message = \"Second message!\", Next = \"Third\"};\n                [\"Third\"] = {Message = \"Third and final message!\", Next = false};\n            };\n        };\n    };\n}\n\nreturn DialogueList\n</code></pre> <p>Info</p> <p>The key of the first message of the dialogue should always be set to [1]. Each message node has a pointer Next that points to the key of the next message to be played once the current message is finished playing. These keys can be customized and unique, although some sort of orderly naming convention is recommended for readability purposes.</p>"},{"location":"pages/examples/#fetching-using-the-dialogue","title":"Fetching &amp; Using the Dialogue","text":"<p>One of the ways to initiate a dialogue is to have it associated with an NPC. We can fetch all the dialogues for the NPC and load whichever dialogue we want by referencing the dialogue ID/key.</p> <p>When creating a new NPC object, we do not need to have a <code>ProximityPrompt</code> in the NPC model. It will automatically be created for you. We can detect when the player initiates a dialogue with the NPC's <code>PromptTriggered</code> event, where we can play the dialogue and add in any additional code or functionality.</p> <pre><code>local steveModel = NPCs.Steve -- the name of the NPC is set to 'Steve', which matches the dialogues listed under the key 'Steve'\nlocal steve = EzNpc.new(steveModel)\n\nlocal dialogues = steve:FetchDialogues() -- fetches all the dialogues under the key 'Steve'\n\nlocal steveId = steve.GetId\nlocal steveFirstDialogue = steve:LoadDialogue(steveId, \"FirstDialogue\")\n\nsteve.PromptTriggered:Connect(function(data, dialogueId) -- returns the npc data and the current loaded dialogue (id)\n    steveFirstDialogue:Play() -- plays the dialogue\nend)\n\nsteveFirstDialogue.DialogueBegun:Connect(function()\n    print(\"Dialogue ended\") -- prints when the dialogue starts\nend)\n\nsteveFirstDialogue.DialogueEnded:Connect(function()\n    print(\"Dialogue ended\") -- prints when the dialogue ends\nend)\n</code></pre> <p></p>"},{"location":"pages/examples/#custom-dialogues","title":"Custom Dialogues","text":""},{"location":"pages/examples/#creating-using-the-dialogue","title":"Creating &amp; Using the Dialogue","text":"<p>When creating a dialogue from scratch in a script, you also have the option to either associate it with an NPC or keep it independent. For this example, we will keep it similar with the previous example and use an NPC.</p> <pre><code>local rogerModel = NPCs.Roger\nlocal roger = EzNpc.new(rogerModel)\nlocal rogerId = roger.GetId -- NPC ID\n\nlocal rogerDialogue = EzDialogue.new(\"Mr. Roger\", \"Custom\") -- (name to be displayed, dialogueId)\nrogerDialogue.Id = rogerId -- Sets the NPC ID\nrogerDialogue.Prompt = roger.GetPrompt -- set the prompt to detect the trigger to the NPC's prompt\n\nroger.PromptTriggered:Connect(function(data, dialogueId)\n    rogerDialogue:StartDialogue(\"Hello\")\n    rogerDialogue:Dialogue(\"Goodbye!\")\n    rogerDialogue:EndDialogue()\nend)\n</code></pre> <p>Info</p> <p>When creating a new custom dialogue, <code>npcId</code> is set to the <code>name</code> by default. To change <code>npcId</code> to suit your needs, you can use the provided setter method. </p> <p>You will also need to declare the <code>ProximityPrompt</code> to be able to detect prompt triggers. Since the NPC automatically creates one for you, you can set the dialogue's prompt to the NPC's prompt.</p> <p></p> <p>Warning</p> <p>To create a dialogue without association to an NPC, you can set <code>npcId</code> and <code>dialogueId</code> however you want. However, you will need to declare your own prompt and write the triggers yourself. </p>"},{"location":"pages/installation/","title":"Installation","text":""},{"location":"pages/installation/#model-installation","title":"Model Installation","text":"<ol> <li>Get the EzDialogue &amp; EzNpc model here (link to be provided).</li> <li>Insert the model into your game. It should be inserted as one folder with sub-folders inside.</li> <li>Drag the folder contents where indicated.</li> <li>Get started by reading the examples guide.</li> </ol>"},{"location":"pages/api/ezdialogue/","title":"EzDialogue","text":""},{"location":"pages/api/ezdialogue/#constructors","title":"Constructors","text":""},{"location":"pages/api/ezdialogue/#new","title":"new","text":"<pre><code>local dialogue = EzDialogue.new(name, dialogueId, settings)\n</code></pre> <p>Creates and returns a new dialogue object. The <code>npcId</code> property is set to <code>name</code> by default. <code>settings</code> is a table of settings or nil, where the table will reconcile with the default settings if any are missing. </p>"},{"location":"pages/api/ezdialogue/#newfromtable","title":"newFromTable","text":"<pre><code>local dialogue = EzDialogue.newFromTable(identifier, dialogueId)\n</code></pre> <p>Creates and returns a new dialogue object by reading a dialogue entry that has already been prepared in a <code>DialogueList</code> dictionary. It searches through <code>DialogueList</code> through the <code>identifier</code> key, then finding the specific dialogue using <code>dialogueId</code>.</p>"},{"location":"pages/api/ezdialogue/#methods","title":"Methods","text":""},{"location":"pages/api/ezdialogue/#methods-for-dialoguelist-dialogues","title":"Methods for <code>DialogueList</code> Dialogues","text":""},{"location":"pages/api/ezdialogue/#play","title":"Play","text":"<pre><code>dialogue:Play()\n</code></pre> <p>Plays the dialogue. </p>"},{"location":"pages/api/ezdialogue/#unlockchoice","title":"UnlockChoice","text":"<pre><code>dialogue:UnlockChoice(nodeId, nextNode)\n</code></pre> <p>Unlocks a choice that was previously locked. Expects the <code>nodeId</code> of the node and the <code>Next</code> pointer of the choice/option to unlock.</p>"},{"location":"pages/api/ezdialogue/#lockchoice","title":"LockChoice","text":"<pre><code>dialogue:LockChoice(nodeId, nextNode)\n</code></pre> <p>Locks a choice that was previously unlocked. Expects the <code>nodeId</code> of the node and the <code>Next</code> pointer of the choice/option to lock.</p>"},{"location":"pages/api/ezdialogue/#methods-for-custom-dialogues","title":"Methods for Custom Dialogues","text":""},{"location":"pages/api/ezdialogue/#startdialogue","title":"StartDialogue","text":"<pre><code>dialogue:StartDialogue(message)\n</code></pre> <p>Starts a dialogue with an initial <code>message</code> that displays first. Cannot start the same dialogue again while it has not ended.</p>"},{"location":"pages/api/ezdialogue/#dialogue","title":"Dialogue","text":"<pre><code>dialogue:Dialogue(message)\n</code></pre> <p>Adds new text to be displayed in the dialogue.</p> <p>Info</p> <p>For more information on RichText support, see the RichText section in examples.</p>"},{"location":"pages/api/ezdialogue/#promptchoices","title":"PromptChoices","text":"<pre><code>local option = dialogue:PromptChoices(optionTable, optionKey)\n</code></pre> <p>Info</p> <p>Usage example that shows the <code>optionTable</code> format: </p><pre><code>local choices = {\n    {Id = 1, Choice = \"First choice\", Reply = \"You chose the first choice\"};\n    {Id = 2, Choice = \"Second choice\", Reply = \"You chose the second choice\"};\n}\n\nlocal promptChosen = rogerDialogue:PromptChoices(choices, \"first_set\") -- \"first_set\" is the id for this options event\nlocal chosenPrompt = promptChosen:Wait() -- returns the choice Id\n</code></pre> <p>Prompts the player with choices that supports up to 3 choices. Yields the dialogue until a choice is chosen. Returns an event that can be used to wait for the chosen option to create custom dialogue trees. </p>"},{"location":"pages/api/ezdialogue/#enddialogue","title":"EndDialogue","text":"<pre><code>dialogue:EndDialogue()\n</code></pre> <p>Ends the dialogue.</p>"},{"location":"pages/api/ezdialogue/#setter-methods","title":"Setter Methods","text":""},{"location":"pages/api/ezdialogue/#prompt","title":"Prompt","text":"<p><code>dialogue.Prompt : boolean</code> [default: false]</p> <p>Accepts a <code>ProximityPrompt</code> and sets the prompt for handling triggers.</p>"},{"location":"pages/api/ezdialogue/#togglemovement","title":"ToggleMovement","text":"<p><code>dialogue.ToggleMovement : boolean</code> [default: false]</p> <p>Set to <code>true</code> if you want the player to be able to move during the dialogue.</p> <p>Warning</p> <p>Setting this value to <code>true</code> is risky as it allows the player to move freely during a dialogue. Use only when required and in a specific case scenario.</p>"},{"location":"pages/api/ezdialogue/#reenablemovement","title":"ReEnableMovement","text":"<p><code>dialogue.ReEnableMovement : boolean</code> [default: true]</p> <p>Set to <code>false</code> if you do not want the player to be able to move after the dialogue.</p> <p>Info</p> <p>This module uses PlayerControls to enable and disable the player controls, which works across all platforms. If you set this value to <code>false</code>, you will have to manually enable the controls on your own.</p>"},{"location":"pages/api/ezdialogue/#canskip","title":"CanSkip","text":"<p><code>dialogue.CanSkip : boolean</code> [default: true]</p> <p>Set to <code>false</code> if you do not want the player to be able to skip the current message being played. If <code>true</code>, a blinking button will appear that will skip to the end of the current message and plays the next message after a cooldown.</p> <p>Note</p> <p>You can change the cooldown length with the provided setter method. The default is <code>3 seconds</code>.</p>"},{"location":"pages/api/ezdialogue/#showname","title":"ShowName","text":"<p><code>dialogue.ShowName : boolean</code> [default: true]</p> <p>Set to <code>false</code> if you do not want the name to be displayed during the dialogue. The name displayed can be changed using the provided setter method.</p>"},{"location":"pages/api/ezdialogue/#reenableprompt","title":"ReEnablePrompt","text":"<p><code>dialogue.ReEnablePrompt : boolean</code> [default: true]</p> <p>Set to <code>false</code> if you do not want the prompt that triggers the dialogue to be enabled again after the dialogue ends.</p> <p>Warning</p> <p>If <code>ReEnablePrompt</code> is set to <code>false</code>, you will have to enable it again on your own. You can retrieve the prompt using the provided getter method and toggle it yourself for your own needs.</p>"},{"location":"pages/api/ezdialogue/#resetcamera","title":"ResetCamera","text":"<p><code>dialogue.ResetCamera : boolean</code> [default: true]</p> <p>Set to <code>false</code> if you do not want the player's camera to reset after the dialogue ends.</p> <p>Info</p> <p>If set to <code>false</code>, you will have to manipulate the player's camera on your own after the dialogue has ended.</p>"},{"location":"pages/api/ezdialogue/#reenableui","title":"ReEnableUI","text":"<p><code>dialogue.ReEnableUI : boolean</code> [default: true]</p> <p>Set to <code>false</code> if you do not want game UI to be enabled again after the dialogue ends.</p> <p>Info</p> <p>You can configure which UI, including your own, will be hidden and shown during a dialogue. For more information, see the UI section in examples.</p>"},{"location":"pages/api/ezdialogue/#textspeed","title":"TextSpeed","text":"<p><code>dialogue.TextSpeed : EzDialogue.enum.TextSpeed.ITEM_NAME</code> [default: EzDialogue.enum.TextSpeed.Normal]</p> <p>You can set the text speed of the dialogue.</p> <p>Info</p> <p>List of available enums: </p><pre><code>EzDialogue.enum.TextSpeed.Slow; -- each character is played after 0.1 seconds\nEzDialogue.enum.TextSpeed.Normal; -- each character is played after 0.05 seconds [DEFAULT]\nEzDialogue.enum.TextSpeed.Fast; -- each character is played after 0.01 seconds\n</code></pre>"},{"location":"pages/api/ezdialogue/#textfont","title":"TextFont","text":"<p><code>dialogue.TextFont : Enum.Font.ITEM_NAME</code> [default: Enum.Font.Arial]</p> <p>You can set the font of the text.</p>"},{"location":"pages/api/ezdialogue/#namefont","title":"NameFont","text":"<p><code>dialogue.NameFont : Enum.Font.ITEM_NAME</code> [default: Enum.Font.Arial]</p> <p>You can set the font of the display name text.</p>"},{"location":"pages/api/ezdialogue/#namefontitalic","title":"NameFontItalic","text":"<p><code>dialogue.NameFontItalic : boolean</code> [default: false]</p> <p>You can set the display name to an italic style by setting the value to <code>true</code>.</p>"},{"location":"pages/api/ezdialogue/#events","title":"Events","text":""},{"location":"pages/api/ezdialogue/#dialoguebegun","title":"DialogueBegun","text":"<p><code>&lt;RBXScriptSignal&gt; dialogue.DialogueBegun(id)</code></p> <pre><code>dialogue.DialogueBegun:Connect(function(id)\n    print(id)\nend)\n</code></pre> <p>Fires when the dialogue starts. Passes the <code>id</code> as an argument.</p>"},{"location":"pages/api/ezdialogue/#dialogueended","title":"DialogueEnded","text":"<p><code>&lt;RBXScriptSignal&gt; dialogue.DialogueEnded(id)</code></p> <pre><code>dialogue.DialogueEnded:Connect(function(id)\n    print(id)\nend)\n</code></pre> <p>Fires when the dialogue ends. Passes the <code>id</code> as an argument.</p> <p>Warning</p> <p>If you need to create additional functions or events that triggers when a dialogue ends, it is better to connect it to the <code>DialogueEnded</code> event as it is the only accurate way of determining when a dialogue interaction has ended.  </p><pre><code>dialogue:StartDialogue(\"Hello\")\ndialogue:EndDialogue()\n-- any code written after will be run regardless if the dialogue has ended or not\n-- the script in which you are calling the dialogue from does not yield when a dialogue is started\n</code></pre>"},{"location":"pages/api/ezdialogue/#onchoiceunlocked","title":"OnChoiceUnlocked","text":"<p><code>&lt;RBXScriptSignal&gt; dialogue.OnChoiceUnlocked(nodeId)</code></p> <pre><code>dialogue.OnChoiceUnlocked:Connect(function(nodeId)\n    print(nodeId)\nend)\n</code></pre> <p>Fires when a choice is unlocked. Passes the <code>nodeId</code> as an argument.</p>"},{"location":"pages/api/ezdialogue/#properties","title":"Properties","text":""},{"location":"pages/api/eznpc/","title":"EzNpc","text":"<p>Hello</p>"}]}